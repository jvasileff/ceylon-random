(function(define) { define(function(require, ex$, module) {
ex$.$CCMM$={"$mod-deps":["ceylon.language\/1.1.0"],"$mod-name":"com.vasileff.ceylon.random.api","$mod-version":"0.0.3","$mod-bin":"7.0","com.vasileff.ceylon.random.api":{randomize:{$t:{md:"$",tp:[{mt:"tp",nm:"Elements"}],pk:"$",nm:"List"},pa:1,mt:"m",an:{doc:["Shuffle the given elements, returning a new `List`."]},tp:[{nm:"Elements"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Elements"},{md:"$",mt:"tp",pk:"$",nm:"Null"}],pk:"$",nm:"Iterable"},mt:"prm",nm:"elements"},{$t:{pk:".",nm:"Random"},def:1,mt:"prm",nm:"random"}]],nm:"randomize"},"$pkg-shared":1,stream:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",pk:".",nm:"Nothing"}],pk:"$",nm:"Iterable"},pa:1,mt:"m",an:{doc:["Produces the [[stream|ceylon.language::Iterable]] that results from repeated\ncalls to the given [[function|next]]. The stream is infinite.\n\nThis function produces a result similar to:\n\n    { next() }.cycled\n"]},tp:[{nm:"Element"}],$m:{next$7vlz3x:{$t:{nm:"Element"},mt:"m",an:{doc:["The function that produces the next element of the stream."]},nm:"next"}},$o:{it$d7hs1l:{super:{md:"$",pk:"$",nm:"Basic"},mt:"o",sts:[{md:"$",tp:[{mt:"tp",nm:"Element"},{mt:"tp",pk:".",nm:"Nothing"}],pk:"$",nm:"Iterable"},{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"}],$m:{iterator:{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Iterator"},pa:3,mt:"m",nm:"iterator"},next:{$t:{nm:"Element"},pa:3,mt:"m",nm:"next"}},nm:"it"}},ps:[[{$t:{nm:"Element"},mt:"prm",an:{doc:["The function that produces the next element of the stream."]},$pt:"f",nm:"next"}]],nm:"stream"},LCGRandom:{super:{md:"$",pk:"$",nm:"Basic"},pa:33,mt:"c",an:{doc:["A [Linear Congruential Generator](http:\/\/en.wikipedia.org\/wiki\/Linear_congruential_generator)\n(LCG) pseudorandom number generator,\ndefined by the recurrence relation:\n\n    X\u2099\u208A\u2081 â‰¡ (a X\u2099 + c) (mod m)\n\nUsing the parameters:\n\n    a = 25214903917\n    c = 11\n    m = 2^48\n\n*Note:* for the JavaScript runtime, there is a loss of precision for Integers greater\nthan 2<sup>53<\/sup> which may result in decreased quality of random numbers produced by\nthis class.\n\nSee <http:\/\/en.wikipedia.org\/wiki\/Linear_congruential_generator>"]},sts:[{pk:".",nm:"Random"}],$m:{nextBits:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"m",an:{throws:["Exception","if [[numBits]] is greater than [[randomLimits.maxBits]]."],doc:["Generates an Integer holding `numBits` pseudorandom bits. This method returns `0` if\n`numBits <= 0`."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The number of random bits to generate. Must not be greater than\n[[com.vasileff.ceylon.random.api::randomLimits.maxBits]]"]},nm:"numBits"}]],nm:"nextBits"},reseed:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Reseed this random number generator. For the Java runtime, the seed value is\nprocessed using `newSeed.xor(a).and(m - 1)` prior to use, and for the JavaScript\nruntime, `newSeed.magnitude % m`."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"newSeed"}]],nm:"reseed"},next$81mvhq:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",nm:"next"}},$at:{xn$2oncah:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1155,mt:"a",nm:"xn"},a$2llt0s:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",nm:"a"},seed$bejtmk:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",an:{doc:["The seed. The value is processed by [[reseed]] prior to use."]},nm:"seed"},c$2llv4u:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",nm:"c"},m64$50b6zq:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",nm:"m64"},m$2lm5p4:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"a",nm:"m"}},ps:[{$t:{md:"$",pk:"$",nm:"Integer"},def:1,mt:"prm",an:{doc:["The seed. The value is processed by [[reseed]] prior to use."]},nm:"seed"}],nm:"LCGRandom"},realInts:{$t:{md:"$",pk:"$",nm:"Boolean"},mt:"a",nm:"realInts"},randomizeInPlace:{$t:{md:"$",pk:"$",nm:"Anything"},pa:1,mt:"m",an:{doc:["Shuffle the given elements. This operation modifies the `Array|MutableList`."]},tp:[{nm:"Element"}],ps:[[{$t:{md:"$",tp:[{mt:"tp",nm:"Element"}],pk:"$",nm:"Array"},mt:"prm",nm:"elements"},{$t:{pk:".",nm:"Random"},def:1,mt:"prm",nm:"random"}]],nm:"randomizeInPlace"},floatUnit:{$t:{md:"$",pk:"$",nm:"Float"},mt:"a",nm:"floatUnit"},randomLimits:{super:{md:"$",pk:"$",nm:"Basic"},pa:1,mt:"o",an:{doc:["Provides limits relevant to generating random numbers on the current runtime."],by:["John Vasileff"]},$at:{maxIntegerBound:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"a",an:{doc:["The largest value that may be used as an argument to [[Random.nextInteger]].\n`maxIntegerBound` is the lesser of:\n\n1. [[runtime.maxIntegerValue]], and\n\n1. 2<sup>n<\/sup>-1, where n = [[maxBits]].\n\nOn both the Java and JavaScript runtimes, `maxIntegerBound` is equal\nto [[runtime.maxIntegerValue]]."]},nm:"maxIntegerBound"},maxValue$5s4h5b:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"maxValue"},numBits$92hft6:{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"a",nm:"numBits"},maxBits:{$t:{md:"$",pk:"$",nm:"Integer"},pa:3,mt:"a",an:{doc:["The largest value that may be used as an argument to [[Random.nextBits]]. `maxBits`\nis the greater of:\n\n1. [[runtime.integerAddressableSize]], and\n\n1. The number of bits required to represent [[runtime.maxIntegerValue]] if the value\nof `maxIntegerBound` can be represented by 2<sup>n<\/sup>-1 for some `n`. Otherwise,\none less than the number of bits required to represent [[runtime.maxIntegerValue]].\n\n`maxBits` is `64` for the Java runtime and `53` for the\nJavaScript runtime."]},nm:"maxBits"}},nm:"randomLimits"},Random:{pa:1,mt:"i",an:{doc:["An interface for random number generators. Satisfying classes must implement\n[[nextBits]], which is used by the default implementaitons of the methods of this\ninterface."],by:["John Vasileff"]},$m:{nextByte:{$t:{md:"$",pk:"$",nm:"Byte"},pa:9,mt:"m",an:{doc:["Returns the next pseudorandom `Byte`."]},nm:"nextByte"},nextBits:{$t:{md:"$",pk:"$",nm:"Integer"},pa:5,mt:"m",an:{throws:["Exception","if [[numBits]] is greater than [[randomLimits.maxBits]]."],doc:["Generates an Integer holding `numBits` pseudorandom bits. This method returns\n`0` for `numBits <= 0`."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",nm:"numBits"}]],nm:"nextBits"},nextBoolean:{$t:{md:"$",pk:"$",nm:"Boolean"},pa:9,mt:"m",an:{doc:["Returns the next pseudorandom `Boolean`."]},nm:"nextBoolean"},nextFloat:{$t:{md:"$",pk:"$",nm:"Float"},pa:9,mt:"m",an:{doc:["Returns the next pseudorandom `Float` between `0.0` and `1.0`."]},nm:"nextFloat"},nextInteger:{$t:{md:"$",pk:"$",nm:"Integer"},pa:9,mt:"m",an:{throws:["Exception","if [[bound]] is less than `1` or greater than `randomLimits.maxIntegerBound`"],doc:["Returns the next pseudorandom `Integer` between `0` (inclusive)\nand [[bound]] (exclusive)."]},ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},mt:"prm",an:{doc:["The upper bound (exclusive)."]},nm:"bound"}]],nm:"nextInteger"}},nm:"Random"},bitLength:{$t:{md:"$",pk:"$",nm:"Integer"},mt:"m",ps:[[{$t:{md:"$",pk:"$",nm:"Integer"},pa:1024,mt:"prm",nm:"number"}]],nm:"bitLength"}}};
});
}(typeof define==='function' && define.amd ? define : function (factory) {
if (typeof exports!=='undefined') { factory(require, exports, module);
} else { throw 'no module loader'; }
}));
